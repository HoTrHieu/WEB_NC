{"ast":null,"code":"import { UserFormRules } from \"../user/UserFormRules\";\nimport { UserService } from \"../user/UserService\";\nexport const RegisterFormRules = { ...UserFormRules,\n  email: [...UserFormRules.email, {\n    async validator(_, email) {\n      const exists = await UserService.checkEmail(email);\n\n      if (exists) {\n        throw new Error('E-mail is existed, please use another');\n      }\n    },\n\n    validateTrigger: 'submit'\n  }],\n  username: [...UserFormRules.username, {\n    async validator(_, username) {\n      const exists = await UserService.checkUsername(username);\n\n      if (exists) {\n        throw new Error('Username is existed, please use another');\n      }\n    },\n\n    validateTrigger: 'submit'\n  }],\n  otp: [{\n    required: true,\n    message: 'OTP is required'\n  }]\n};","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/auth/RegisterFormRules.tsx"],"names":["UserFormRules","UserService","RegisterFormRules","email","validator","_","exists","checkEmail","Error","validateTrigger","username","checkUsername","otp","required","message"],"mappings":"AACA,SAASA,aAAT,QAA8B,uBAA9B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAMA,OAAO,MAAMC,iBAAqC,GAAG,EACnD,GAAGF,aADgD;AAEnDG,EAAAA,KAAK,EAAE,CACL,GAAGH,aAAa,CAACG,KADZ,EAEL;AACE,UAAMC,SAAN,CAAgBC,CAAhB,EAAmBF,KAAnB,EAA0B;AACxB,YAAMG,MAAM,GAAG,MAAML,WAAW,CAACM,UAAZ,CAAuBJ,KAAvB,CAArB;;AACA,UAAIG,MAAJ,EAAY;AACV,cAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF,KANH;;AAOEC,IAAAA,eAAe,EAAE;AAPnB,GAFK,CAF4C;AAcnDC,EAAAA,QAAQ,EAAE,CACR,GAAGV,aAAa,CAACU,QADT,EAER;AACE,UAAMN,SAAN,CAAgBC,CAAhB,EAAmBK,QAAnB,EAA6B;AAC3B,YAAMJ,MAAM,GAAG,MAAML,WAAW,CAACU,aAAZ,CAA0BD,QAA1B,CAArB;;AACA,UAAIJ,MAAJ,EAAY;AACV,cAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF,KANH;;AAOEC,IAAAA,eAAe,EAAE;AAPnB,GAFQ,CAdyC;AA0BnDG,EAAAA,GAAG,EAAE,CACH;AAAEC,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADG;AA1B8C,CAA9C","sourcesContent":["import { Rule } from \"rc-field-form/lib/interface\";\nimport { UserFormRules } from \"../user/UserFormRules\";\nimport { UserService } from \"../user/UserService\";\n\ninterface IRegisterFormRules {\n  [key: string]: Rule[]\n}\n\nexport const RegisterFormRules: IRegisterFormRules = {\n  ...UserFormRules,\n  email: [\n    ...UserFormRules.email,\n    {\n      async validator(_, email) {\n        const exists = await UserService.checkEmail(email);\n        if (exists) {\n          throw new Error('E-mail is existed, please use another');\n        }\n      },\n      validateTrigger: 'submit'\n    }\n  ],\n  username: [\n    ...UserFormRules.username,\n    {\n      async validator(_, username) {\n        const exists = await UserService.checkUsername(username);\n        if (exists) {\n          throw new Error('Username is existed, please use another')\n        }\n      },\n      validateTrigger: 'submit'\n    }\n  ],\n  otp: [\n    { required: true, message: 'OTP is required' }\n  ]\n}"]},"metadata":{},"sourceType":"module"}