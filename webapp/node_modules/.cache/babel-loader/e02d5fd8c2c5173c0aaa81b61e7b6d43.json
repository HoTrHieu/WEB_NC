{"ast":null,"code":"import { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { CrudService } from \"../../shared/services/CrudService\";\nexport class UserService {\n  static add(request) {\n    return CrudService.create(ApiEndpoint.user.add, request);\n  }\n\n  static async checkEmail(email) {\n    const res = await CrudService.get(ApiEndpoint.user.checkEmail, {\n      params: {\n        email\n      }\n    });\n    return res.exists;\n  }\n\n  static async checkUsername(username) {\n    const res = await CrudService.get(ApiEndpoint.user.checkUsername, {\n      params: {\n        username\n      }\n    });\n    return res.exists;\n  }\n\n  static search(request) {\n    return CrudService.get(ApiEndpoint.user.search, {\n      params: request\n    });\n  }\n\n  static async updateEmail(payload) {\n    return CrudService.put(ApiEndpoint.user.updateEmail, payload);\n  }\n\n  static async updateFirstLastName(payload) {\n    return CrudService.put(ApiEndpoint.user.updateFirstLastName, payload);\n  }\n\n  static async updateTeacherProfile(payload) {\n    return CrudService.put(ApiEndpoint.user.updateTeacherProfile, payload);\n  }\n\n  static async updateStatus(id, status) {\n    const res = await CrudService.put(ApiEndpoint.user.updateStatus(id), {\n      status\n    });\n    return res;\n  }\n\n  static async all() {\n    return CrudService.get(ApiEndpoint.user.all);\n  }\n\n}","map":{"version":3,"sources":["/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/user/UserService.ts"],"names":["ApiEndpoint","CrudService","UserService","add","request","create","user","checkEmail","email","res","get","params","exists","checkUsername","username","search","updateEmail","payload","put","updateFirstLastName","updateTeacherProfile","updateStatus","id","status","all"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oCAA5B;AAGA,SAASC,WAAT,QAA4B,mCAA5B;AAIA,OAAO,MAAMC,WAAN,CAAkB;AACb,SAAHC,GAAG,CAACC,OAAD,EAA2B;AACnC,WAAOH,WAAW,CAACI,MAAZ,CAAmBL,WAAW,CAACM,IAAZ,CAAiBH,GAApC,EAAyCC,OAAzC,CAAP;AACD;;AAEsB,eAAVG,UAAU,CAACC,KAAD,EAAgB;AACrC,UAAMC,GAAG,GAAG,MAAMR,WAAW,CAACS,GAAZ,CAAgBV,WAAW,CAACM,IAAZ,CAAiBC,UAAjC,EAA6C;AAAEI,MAAAA,MAAM,EAAE;AAAEH,QAAAA;AAAF;AAAV,KAA7C,CAAlB;AACA,WAAOC,GAAG,CAACG,MAAX;AACD;;AAEyB,eAAbC,aAAa,CAACC,QAAD,EAAmB;AAC3C,UAAML,GAAG,GAAG,MAAMR,WAAW,CAACS,GAAZ,CAAgBV,WAAW,CAACM,IAAZ,CAAiBO,aAAjC,EAAgD;AAChEF,MAAAA,MAAM,EAAE;AAAEG,QAAAA;AAAF;AADwD,KAAhD,CAAlB;AAGA,WAAOL,GAAG,CAACG,MAAX;AACD;;AAEY,SAANG,MAAM,CAACX,OAAD,EAAgD;AAC3D,WAAOH,WAAW,CAACS,GAAZ,CAAgBV,WAAW,CAACM,IAAZ,CAAiBS,MAAjC,EAAyC;AAC9CJ,MAAAA,MAAM,EAAEP;AADsC,KAAzC,CAAP;AAGD;;AAEuB,eAAXY,WAAW,CAACC,OAAD,EAAe;AACrC,WAAOhB,WAAW,CAACiB,GAAZ,CAAgBlB,WAAW,CAACM,IAAZ,CAAiBU,WAAjC,EAA8CC,OAA9C,CAAP;AACD;;AAE+B,eAAnBE,mBAAmB,CAACF,OAAD,EAAe;AAC7C,WAAOhB,WAAW,CAACiB,GAAZ,CAAgBlB,WAAW,CAACM,IAAZ,CAAiBa,mBAAjC,EAAsDF,OAAtD,CAAP;AACD;;AAEgC,eAApBG,oBAAoB,CAACH,OAAD,EAAe;AAC9C,WAAOhB,WAAW,CAACiB,GAAZ,CAAgBlB,WAAW,CAACM,IAAZ,CAAiBc,oBAAjC,EAAuDH,OAAvD,CAAP;AACD;;AAEwB,eAAZI,YAAY,CAACC,EAAD,EAAaC,MAAb,EAAmC;AAC1D,UAAMd,GAAG,GAAG,MAAMR,WAAW,CAACiB,GAAZ,CAAgBlB,WAAW,CAACM,IAAZ,CAAiBe,YAAjB,CAA8BC,EAA9B,CAAhB,EAAmD;AAAEC,MAAAA;AAAF,KAAnD,CAAlB;AACA,WAAOd,GAAP;AACD;;AAEe,eAAHe,GAAG,GAAG;AACjB,WAAOvB,WAAW,CAACS,GAAZ,CAAgBV,WAAW,CAACM,IAAZ,CAAiBkB,GAAjC,CAAP;AACD;;AA1CsB","sourcesContent":["import { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { IUser } from \"../../shared/entities/IUser\";\nimport { EntityStatus } from \"../../shared/enums/EntityStatus\";\nimport { CrudService } from \"../../shared/services/CrudService\";\nimport { IAddUserRequest } from \"./types/AddUserRequest\";\nimport { IPagingResponse } from \"./types/IPagingResponse\";\n\nexport class UserService {\n  static add(request: IAddUserRequest) {\n    return CrudService.create(ApiEndpoint.user.add, request);\n  }\n\n  static async checkEmail(email: string) {\n    const res = await CrudService.get(ApiEndpoint.user.checkEmail, { params: { email } });\n    return res.exists;\n  }\n\n  static async checkUsername(username: string) {\n    const res = await CrudService.get(ApiEndpoint.user.checkUsername, {\n      params: { username },\n    });\n    return res.exists;\n  }\n\n  static search(request: any): Promise<IPagingResponse<IUser>> {\n    return CrudService.get(ApiEndpoint.user.search, {\n      params: request\n    });\n  }\n  \n  static async updateEmail(payload: any) {\n    return CrudService.put(ApiEndpoint.user.updateEmail, payload);\n  }\n\n  static async updateFirstLastName(payload: any) {\n    return CrudService.put(ApiEndpoint.user.updateFirstLastName, payload);\n  }\n\n  static async updateTeacherProfile(payload: any) {\n    return CrudService.put(ApiEndpoint.user.updateTeacherProfile, payload);\n  }\n\n  static async updateStatus(id: number, status: EntityStatus) {\n    const res = await CrudService.put(ApiEndpoint.user.updateStatus(id), { status });\n    return res;\n  }\n\n  static async all() {\n    return CrudService.get(ApiEndpoint.user.all);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}