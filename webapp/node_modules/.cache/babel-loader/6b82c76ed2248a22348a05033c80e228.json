{"ast":null,"code":"import { CategoryService } from \"./CategoryService\";\nexport const CategoryFormRules = {\n  name: options => {\n    const rules = [{\n      required: true,\n      message: \"Name is required\"\n    }, {\n      min: 2,\n      message: \"Name is too short\"\n    }, {\n      max: 255,\n      message: \"Name is too long\"\n    }];\n\n    if (options.checkName) {\n      rules.push({\n        async validator(_, name) {\n          const exists = await CategoryService.checkName(name);\n\n          if (exists) {\n            throw new Error(\"Name is existed, please use another one\");\n          }\n        },\n\n        validateTrigger: 'submit'\n      });\n    }\n\n    return rules;\n  }\n};","map":{"version":3,"sources":["/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/category/CategoryFormRules.tsx"],"names":["CategoryService","CategoryFormRules","name","options","rules","required","message","min","max","checkName","push","validator","_","exists","Error","validateTrigger"],"mappings":"AAAA,SAASA,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,iBAAsB,GAAG;AACpCC,EAAAA,IAAI,EAAGC,OAAD,IAAkB;AACtB,UAAMC,KAAU,GAAG,CACjB;AAAEC,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KADiB,EAEjB;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUD,MAAAA,OAAO,EAAE;AAAnB,KAFiB,EAGjB;AAAEE,MAAAA,GAAG,EAAE,GAAP;AAAYF,MAAAA,OAAO,EAAE;AAArB,KAHiB,CAAnB;;AAMA,QAAIH,OAAO,CAACM,SAAZ,EAAuB;AACrBL,MAAAA,KAAK,CAACM,IAAN,CAAW;AACT,cAAMC,SAAN,CAAgBC,CAAhB,EAAwBV,IAAxB,EAAsC;AACpC,gBAAMW,MAAM,GAAG,MAAMb,eAAe,CAACS,SAAhB,CAA0BP,IAA1B,CAArB;;AACA,cAAIW,MAAJ,EAAY;AACV,kBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF,SANQ;;AAOTC,QAAAA,eAAe,EAAE;AAPR,OAAX;AASD;;AAED,WAAOX,KAAP;AACD;AArBmC,CAA/B","sourcesContent":["import { CategoryService } from \"./CategoryService\"\n\nexport const CategoryFormRules: any = {\n  name: (options: any) => {\n    const rules: any = [\n      { required: true, message: \"Name is required\" },\n      { min: 2, message: \"Name is too short\" },\n      { max: 255, message: \"Name is too long\" }\n    ];\n\n    if (options.checkName) {\n      rules.push({\n        async validator(_: any, name: string) {\n          const exists = await CategoryService.checkName(name);\n          if (exists) {\n            throw new Error(\"Name is existed, please use another one\");\n          }\n        },\n        validateTrigger: 'submit'\n      });\n    }\n\n    return rules;\n  }\n}"]},"metadata":{},"sourceType":"module"}