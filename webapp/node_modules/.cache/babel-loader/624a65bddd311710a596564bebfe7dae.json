{"ast":null,"code":"var _jsxFileName = \"/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/profile/EmailEditForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Form, Input, notification } from \"antd\";\nimport moment from \"moment\";\nimport { NotificationUtils } from \"../../shared/utils/NotificationUtils\";\nimport { RegisterFormRules } from \"../auth/RegisterFormRules\";\nimport { useOtpSender } from \"../otp/useOtpSender\";\nimport { UserService } from \"../user/UserService\";\nimport { ProfileActionButtonGroup } from \"./ProfileActionButtonGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function EmailEditForm(props) {\n  _s();\n\n  const [form] = Form.useForm();\n  const [edit, setEdit] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [email, setEmail] = useState();\n  const getEmail = useCallback(async () => {\n    let email;\n\n    try {\n      const values = await form.validateFields();\n      email = values.email;\n    } catch {\n      return false;\n    }\n\n    return email;\n  }, [form]);\n  const {\n    authedUser,\n    onSaveSuccess\n  } = props;\n  const otpSender = useOtpSender();\n  const {\n    sendOtp: _sendOtp,\n    SendOtpButton\n  } = otpSender;\n  const sendOtp = useCallback(async () => {\n    const email = await getEmail();\n    if (!email) return;\n    await _sendOtp({ ...authedUser,\n      email\n    });\n    setEmail(email);\n  }, [getEmail, _sendOtp, authedUser]);\n  const remainDaysToUpdateEmail = useMemo(() => {\n    if (authedUser && authedUser.updatedEmailDate) {\n      return 30 - moment().diff(moment(authedUser === null || authedUser === void 0 ? void 0 : authedUser.updatedEmailDate), \"days\");\n    }\n\n    return -1;\n  }, [authedUser]);\n  const saveEmail = useCallback(async payload => {\n    setSaveLoading(true);\n\n    try {\n      await UserService.updateEmail(payload);\n      setEdit(false);\n      onSaveSuccess(payload.email);\n      notification.success({\n        message: \"Success\",\n        description: \"Update email success\"\n      });\n    } catch (err) {\n      console.error(err);\n      NotificationUtils.error(err.message);\n    }\n\n    setSaveLoading(false);\n  }, [onSaveSuccess]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    initialValues: {\n      email: authedUser.email\n    },\n    onFinish: saveEmail,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block mb-2\",\n      children: [\"E-mail \", edit && /*#__PURE__*/_jsxDEV(\"b\", {\n        className: \"text-red-400\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"email\",\n      rules: RegisterFormRules.email,\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        disabled: !edit,\n        placeholder: \"E-mail...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), !email && remainDaysToUpdateEmail < 0 && /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(ProfileActionButtonGroup, {\n        edit: edit,\n        saveBtnTitle: \"Continue\",\n        editBtnTitle: \"Edit email\",\n        onSave: sendOtp,\n        onCancel: () => setEdit(false),\n        onEdit: () => setEdit(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), remainDaysToUpdateEmail > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"my-0 text-red-400\",\n      children: [\"Please wait for \", remainDaysToUpdateEmail, \" days to update your email\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), !!email && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2\",\n        children: [\"OTP \", /*#__PURE__*/_jsxDEV(\"b\", {\n          className: \"text-red-400\",\n          children: \"*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"otp\",\n        rules: RegisterFormRules.otp,\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"OTP...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: [/*#__PURE__*/_jsxDEV(SendOtpButton, {\n          className: \"w-full mb-4\",\n          onClick: () => otpSender.sendOtp({ ...authedUser,\n            email\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          shape: \"round\",\n          className: \"w-full\",\n          htmlType: \"submit\",\n          loading: saveLoading,\n          children: \"Save new email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailEditForm, \"XZbMsv2EJtHTRlnCq3SKRZIqsPg=\", false, function () {\n  return [Form.useForm, useOtpSender];\n});\n\n_c = EmailEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailEditForm\");","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/profile/EmailEditForm.tsx"],"names":["React","useCallback","useMemo","useState","Button","Form","Input","notification","moment","NotificationUtils","RegisterFormRules","useOtpSender","UserService","ProfileActionButtonGroup","EmailEditForm","props","form","useForm","edit","setEdit","saveLoading","setSaveLoading","email","setEmail","getEmail","values","validateFields","authedUser","onSaveSuccess","otpSender","sendOtp","_sendOtp","SendOtpButton","remainDaysToUpdateEmail","updatedEmailDate","diff","saveEmail","payload","updateEmail","success","message","description","err","console","error","otp"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\nimport { Button, Form, Input, notification } from \"antd\";\nimport moment from \"moment\";\nimport { IUser } from \"../../shared/entities/IUser\";\nimport { NotificationUtils } from \"../../shared/utils/NotificationUtils\";\nimport { RegisterFormRules } from \"../auth/RegisterFormRules\";\nimport { useOtpSender } from \"../otp/useOtpSender\";\nimport { UserService } from \"../user/UserService\";\nimport { ProfileActionButtonGroup } from \"./ProfileActionButtonGroup\";\n\ninterface IEmailEditFormProps {\n  authedUser: IUser;\n  onSaveSuccess: (email: string) => any;\n}\n\nexport function EmailEditForm(props: IEmailEditFormProps) {\n  const [form] = Form.useForm();\n  const [edit, setEdit] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const [email, setEmail] = useState<any>();\n\n  const getEmail = useCallback(async () => {\n    let email;\n    try {\n      const values = await form.validateFields();\n      email = values.email;\n    } catch {\n      return false;\n    }\n    return email;\n  }, [form]);\n\n  const { authedUser, onSaveSuccess } = props;\n  const otpSender = useOtpSender();\n  const { sendOtp: _sendOtp, SendOtpButton } = otpSender;\n  const sendOtp = useCallback(async () => {\n    const email = await getEmail();\n    if (!email) return;\n    await _sendOtp({ ...authedUser, email } as any);\n    setEmail(email);\n  }, [getEmail, _sendOtp, authedUser]);\n\n  const remainDaysToUpdateEmail = useMemo(() => {\n    if (authedUser && authedUser.updatedEmailDate) {\n      return 30 - moment().diff(moment(authedUser?.updatedEmailDate), \"days\");\n    }\n    return -1;\n  }, [authedUser]);\n\n  const saveEmail = useCallback(\n    async (payload: any) => {\n      setSaveLoading(true);\n      try {\n        await UserService.updateEmail(payload);\n        setEdit(false);\n        onSaveSuccess(payload.email);\n        notification.success({\n          message: \"Success\",\n          description: \"Update email success\",\n        });\n      } catch (err) {\n        console.error(err);\n        NotificationUtils.error(err.message);\n      }\n      setSaveLoading(false);\n    },\n    [onSaveSuccess]\n  );\n\n  return (\n    <Form\n      form={form}\n      initialValues={{ email: authedUser.email }}\n      onFinish={saveEmail}\n    >\n      <label className=\"block mb-2\">\n        E-mail {edit && <b className=\"text-red-400\">*</b>}\n      </label>\n      <Form.Item name=\"email\" rules={RegisterFormRules.email}>\n        <Input disabled={!edit} placeholder=\"E-mail...\" />\n      </Form.Item>\n      {!email && remainDaysToUpdateEmail < 0 && (\n        <Form.Item>\n          <ProfileActionButtonGroup\n            edit={edit}\n            saveBtnTitle=\"Continue\"\n            editBtnTitle=\"Edit email\"\n            onSave={sendOtp}\n            onCancel={() => setEdit(false)}\n            onEdit={() => setEdit(true)}\n          />\n        </Form.Item>\n      )}\n      {remainDaysToUpdateEmail > 0 && (\n        <p className=\"my-0 text-red-400\">\n          Please wait for {remainDaysToUpdateEmail} days to update your email\n        </p>\n      )}\n      {!!email && (\n        <>\n          <label className=\"block mb-2\">\n            OTP <b className=\"text-red-400\">*</b>\n          </label>\n          <Form.Item name=\"otp\" rules={RegisterFormRules.otp}>\n            <Input placeholder=\"OTP...\" />\n          </Form.Item>\n          <Form.Item>\n            <SendOtpButton\n              className=\"w-full mb-4\"\n              onClick={() =>\n                otpSender.sendOtp({\n                  ...authedUser,\n                  email,\n                } as any)\n              }\n            />\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"w-full\"\n              htmlType=\"submit\"\n              loading={saveLoading}\n            >\n              Save new email\n            </Button>\n          </Form.Item>\n        </>\n      )}\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}