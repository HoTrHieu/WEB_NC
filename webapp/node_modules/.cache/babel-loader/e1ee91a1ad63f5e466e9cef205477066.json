{"ast":null,"code":"var _jsxFileName = \"/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/otp/useOtpSender.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, notification } from \"antd\";\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { NotificationUtils } from \"../../shared/utils/NotificationUtils\";\nimport { MailSenderService } from \"../mail-sender/MailSenderService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sendOtpWaitTimes = [0, 30, 300, 600, 1800];\nexport function useOtpSender() {\n  _s();\n\n  const [sendOtpCount, setSendOtpCount] = useState(0);\n  const [sendOtpWaitTime, setSendOtpWaitTime] = useState(0);\n  const intervalRef = useRef();\n  const sendOtp = useCallback(async user => {\n    try {\n      await MailSenderService.sendOtp(user.firstName, user.email);\n      setSendOtpCount(sendOtpCount + 1);\n      notification.success({\n        message: \"Success\",\n        description: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"An e-mail with OTP is sent for \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 46\n          }, this), \", please check it\"]\n        }, void 0, true)\n      });\n    } catch (err) {\n      console.error(err);\n      NotificationUtils.error(err.message);\n    }\n  }, [sendOtpCount]);\n  const removeInterval = useCallback(() => {\n    if (!!intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  }, []);\n  useEffect(() => {\n    removeInterval();\n    let totalWaitTime = sendOtpWaitTimes[Math.min(sendOtpCount, sendOtpWaitTimes.length - 1)];\n    setSendOtpWaitTime(totalWaitTime);\n    intervalRef.current = setInterval(() => {\n      if (--totalWaitTime === 0) {\n        removeInterval();\n      }\n\n      setSendOtpWaitTime(totalWaitTime);\n    }, 1000);\n    return removeInterval;\n  }, [sendOtpCount, removeInterval]);\n  const SendOtpButton = /*#__PURE__*/memo(props => /*#__PURE__*/_jsxDEV(Button, {\n    type: \"primary\",\n    shape: \"round\",\n    loading: sendOtpWaitTime > 0,\n    ...props,\n    children: sendOtpWaitTime > 0 ? `Please wait for ${sendOtpWaitTime} (s)...` : \"Re-send OTP\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this));\n  return useMemo(() => ({\n    sendOtp,\n    removeInterval,\n    SendOtpButton\n  }), [SendOtpButton, removeInterval, sendOtp]);\n}\n\n_s(useOtpSender, \"fA1yMzhw4JMPezgq7eyrbsK1wQk=\");","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/otp/useOtpSender.tsx"],"names":["Button","notification","memo","useCallback","useEffect","useMemo","useRef","useState","NotificationUtils","MailSenderService","sendOtpWaitTimes","useOtpSender","sendOtpCount","setSendOtpCount","sendOtpWaitTime","setSendOtpWaitTime","intervalRef","sendOtp","user","firstName","email","success","message","description","err","console","error","removeInterval","current","clearInterval","totalWaitTime","Math","min","length","setInterval","SendOtpButton","props"],"mappings":"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","sourcesContent":["import { Button, ButtonProps, notification } from \"antd\";\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { NotificationUtils } from \"../../shared/utils/NotificationUtils\";\nimport { MailSenderService } from \"../mail-sender/MailSenderService\";\nimport { IAddUserRequest } from \"../user/types/AddUserRequest\";\n\nconst sendOtpWaitTimes = [0, 30, 300, 600, 1800];\n\nexport function useOtpSender() {\n  const [sendOtpCount, setSendOtpCount] = useState(0);\n  const [sendOtpWaitTime, setSendOtpWaitTime] = useState(0);\n  const intervalRef = useRef<any>();\n\n  const sendOtp = useCallback(\n    async (user: IAddUserRequest) => {\n      try {\n        await MailSenderService.sendOtp(user.firstName, user.email);\n        setSendOtpCount(sendOtpCount + 1);\n        notification.success({\n          message: \"Success\",\n          description: (\n            <>\n              An e-mail with OTP is sent for <b>{user.email}</b>, please check\n              it\n            </>\n          ),\n        });\n      } catch (err) {\n        console.error(err);\n        NotificationUtils.error(err.message);\n      }\n    },\n    [sendOtpCount]\n  );\n\n  const removeInterval = useCallback(() => {\n    if (!!intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  }, []);\n\n  useEffect(() => {\n    removeInterval();\n\n    let totalWaitTime =\n      sendOtpWaitTimes[Math.min(sendOtpCount, sendOtpWaitTimes.length - 1)];\n    setSendOtpWaitTime(totalWaitTime);\n    intervalRef.current = setInterval(() => {\n      if (--totalWaitTime === 0) {\n        removeInterval();\n      }\n      setSendOtpWaitTime(totalWaitTime);\n    }, 1000);\n\n    return removeInterval;\n  }, [sendOtpCount, removeInterval]);\n\n  const SendOtpButton = memo((props: ButtonProps) => (\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        loading={sendOtpWaitTime > 0}\n        {...props}\n      >\n        {sendOtpWaitTime > 0\n          ? `Please wait for ${sendOtpWaitTime} (s)...`\n          : \"Re-send OTP\"}\n      </Button>\n  ));\n\n  return useMemo(\n    () => ({\n      sendOtp,\n      removeInterval,\n      SendOtpButton,\n    }),\n    [SendOtpButton, removeInterval, sendOtp]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}