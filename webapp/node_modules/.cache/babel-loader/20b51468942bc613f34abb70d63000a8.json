{"ast":null,"code":"import Axios from \"axios\";\nimport { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { UserRole } from \"../../shared/enums/UserRole\";\nimport { CrudService } from \"../../shared/services/CrudService\";\nimport qs from 'querystring';\nexport class AuthService {\n  static get isAuthed() {\n    const params = qs.parse(window.location.search.replace('?', ''));\n\n    if (!!params.accessToken && !!params.refreshToken) {\n      this.saveTokens(params);\n      window.location.search = '';\n    }\n\n    return !!this.accessToken;\n  }\n\n  static get accessToken() {\n    return sessionStorage.getItem(this.ACCESS_TOKEN_KEY);\n  }\n\n  static get refreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  static saveTokens(response) {\n    sessionStorage.setItem(this.ACCESS_TOKEN_KEY, response.accessToken);\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, response.refreshToken);\n    return response;\n  }\n\n  static async login(username, password) {\n    try {\n      const {\n        data\n      } = await Axios.post(ApiEndpoint.auth.login, {\n        username,\n        password\n      });\n      return this.saveTokens(data);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  static clearTokens() {\n    sessionStorage.removeItem(this.ACCESS_TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  static logout() {\n    this.clearTokens();\n    window.location.pathname = \"/\";\n  }\n\n  static async refreshAccessToken() {\n    if (!this.refreshToken) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await Axios.post(ApiEndpoint.auth.refreshAccessToken, null, {\n        params: {\n          refreshToken: this.refreshToken\n        }\n      });\n      return this.saveTokens(data);\n    } catch (err) {\n      var _err$response;\n\n      if ((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 404) {\n        this.logout();\n      } else {\n        console.error(err);\n      }\n\n      return false;\n    }\n  }\n\n  static async getUser() {\n    if (this.isAuthed) {\n      if (!this.user) {\n        this.user = await this.getProfile();\n      }\n\n      return this.user;\n    }\n\n    return null;\n  }\n\n  static async getProfile() {\n    try {\n      const result = await Axios.get(ApiEndpoint.auth.getProfile);\n      return result.data;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  static changePassword(oldPassword, newPassword) {\n    return CrudService.put(ApiEndpoint.auth.changePassword, {\n      oldPassword,\n      newPassword\n    });\n  }\n\n  static get isAdmin() {\n    return this.user.role === UserRole.ADMIN;\n  }\n\n  static register(user) {\n    return CrudService.create(ApiEndpoint.auth.register, user);\n  }\n\n}\nAuthService.user = void 0;\nAuthService.ACCESS_TOKEN_KEY = \"FDM_ACCESS_TOKEN\";\nAuthService.REFRESH_TOKEN_KEY = \"FDM_REFRESH_TOKEN\";","map":{"version":3,"sources":["/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/auth/AuthService.ts"],"names":["Axios","ApiEndpoint","UserRole","CrudService","qs","AuthService","isAuthed","params","parse","window","location","search","replace","accessToken","refreshToken","saveTokens","sessionStorage","getItem","ACCESS_TOKEN_KEY","localStorage","REFRESH_TOKEN_KEY","response","setItem","login","username","password","data","post","auth","err","console","error","clearTokens","removeItem","logout","pathname","refreshAccessToken","status","getUser","user","getProfile","result","get","changePassword","oldPassword","newPassword","put","isAdmin","role","ADMIN","register","create"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,oCAA5B;AAEA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AAEA,OAAOC,EAAP,MAAe,aAAf;AAOA,OAAO,MAAMC,WAAN,CAAkB;AAKJ,aAARC,QAAQ,GAAG;AACpB,UAAMC,MAAW,GAAGH,EAAE,CAACI,KAAH,CAASC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,OAAvB,CAA+B,GAA/B,EAAoC,EAApC,CAAT,CAApB;;AACA,QAAI,CAAC,CAACL,MAAM,CAACM,WAAT,IAAwB,CAAC,CAACN,MAAM,CAACO,YAArC,EAAmD;AACjD,WAAKC,UAAL,CAAgBR,MAAhB;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,EAAzB;AACD;;AACD,WAAO,CAAC,CAAC,KAAKE,WAAd;AACD;;AAEqB,aAAXA,WAAW,GAAG;AACvB,WAAOG,cAAc,CAACC,OAAf,CAAuB,KAAKC,gBAA5B,CAAP;AACD;;AAEsB,aAAZJ,YAAY,GAAG;AACxB,WAAOK,YAAY,CAACF,OAAb,CAAqB,KAAKG,iBAA1B,CAAP;AACD;;AAEwB,SAAVL,UAAU,CAACM,QAAD,EAA2B;AAClDL,IAAAA,cAAc,CAACM,OAAf,CAAuB,KAAKJ,gBAA5B,EAA8CG,QAAQ,CAACR,WAAvD;AACAM,IAAAA,YAAY,CAACG,OAAb,CAAqB,KAAKF,iBAA1B,EAA6CC,QAAQ,CAACP,YAAtD;AACA,WAAOO,QAAP;AACD;;AAEiB,eAALE,KAAK,CAACC,QAAD,EAAmBC,QAAnB,EAAqC;AACrD,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAM1B,KAAK,CAAC2B,IAAN,CAAW1B,WAAW,CAAC2B,IAAZ,CAAiBL,KAA5B,EAAmC;AACxDC,QAAAA,QADwD;AAExDC,QAAAA;AAFwD,OAAnC,CAAvB;AAIA,aAAO,KAAKV,UAAL,CAAgBW,IAAhB,CAAP;AACD,KAND,CAME,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,aAAO,KAAP;AACD;AACF;;AAEiB,SAAXG,WAAW,GAAG;AACnBhB,IAAAA,cAAc,CAACiB,UAAf,CAA0B,KAAKf,gBAA/B;AACAC,IAAAA,YAAY,CAACc,UAAb,CAAwB,KAAKb,iBAA7B;AACD;;AAEY,SAANc,MAAM,GAAG;AACd,SAAKF,WAAL;AACAvB,IAAAA,MAAM,CAACC,QAAP,CAAgByB,QAAhB,GAA2B,GAA3B;AACD;;AAE8B,eAAlBC,kBAAkB,GAAG;AAChC,QAAI,CAAC,KAAKtB,YAAV,EAAwB;AACtB,aAAO,KAAP;AACD;;AAED,QAAI;AACF,YAAM;AAAEY,QAAAA;AAAF,UAAW,MAAM1B,KAAK,CAAC2B,IAAN,CACrB1B,WAAW,CAAC2B,IAAZ,CAAiBQ,kBADI,EAErB,IAFqB,EAGrB;AACE7B,QAAAA,MAAM,EAAE;AAAEO,UAAAA,YAAY,EAAE,KAAKA;AAArB;AADV,OAHqB,CAAvB;AAOA,aAAO,KAAKC,UAAL,CAAgBW,IAAhB,CAAP;AACD,KATD,CASE,OAAOG,GAAP,EAAY;AAAA;;AACZ,UAAI,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,6BAAAA,GAAG,CAAER,QAAL,gEAAegB,MAAf,MAA0B,GAA9B,EAAmC;AACjC,aAAKH,MAAL;AACD,OAFD,MAEO;AACLJ,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;;AACD,aAAO,KAAP;AACD;AACF;;AAEmB,eAAPS,OAAO,GAAG;AACrB,QAAI,KAAKhC,QAAT,EAAmB;AACjB,UAAI,CAAC,KAAKiC,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAY,MAAM,KAAKC,UAAL,EAAlB;AACD;;AACD,aAAO,KAAKD,IAAZ;AACD;;AACD,WAAO,IAAP;AACD;;AAE8B,eAAVC,UAAU,GAAG;AAChC,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMzC,KAAK,CAAC0C,GAAN,CAAUzC,WAAW,CAAC2B,IAAZ,CAAiBY,UAA3B,CAArB;AACA,aAAOC,MAAM,CAACf,IAAd;AACD,KAHD,CAGE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,aAAO,IAAP;AACD;AACF;;AAEoB,SAAdc,cAAc,CAACC,WAAD,EAAsBC,WAAtB,EAA2C;AAC9D,WAAO1C,WAAW,CAAC2C,GAAZ,CAAgB7C,WAAW,CAAC2B,IAAZ,CAAiBe,cAAjC,EAAiD;AACtDC,MAAAA,WADsD;AAEtDC,MAAAA;AAFsD,KAAjD,CAAP;AAID;;AAEiB,aAAPE,OAAO,GAAG;AACnB,WAAO,KAAKR,IAAL,CAAUS,IAAV,KAAmB9C,QAAQ,CAAC+C,KAAnC;AACD;;AAEc,SAARC,QAAQ,CAACX,IAAD,EAAyB;AACtC,WAAOpC,WAAW,CAACgD,MAAZ,CAAmBlD,WAAW,CAAC2B,IAAZ,CAAiBsB,QAApC,EAA8CX,IAA9C,CAAP;AACD;;AA5GsB;AAAZlC,W,CACGkC,I;AADHlC,W,CAEaa,gB,GAAmB,kB;AAFhCb,W,CAGae,iB,GAAoB,mB","sourcesContent":["import Axios from \"axios\";\nimport { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { IUser } from \"../../shared/entities/IUser\";\nimport { UserRole } from \"../../shared/enums/UserRole\";\nimport { CrudService } from \"../../shared/services/CrudService\";\nimport { IRegisterRequest } from \"./types/IRegisterRequest\";\nimport qs from 'querystring';\n\ninterface ITokenResponse {\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport class AuthService {\n  public static user: IUser;\n  private static readonly ACCESS_TOKEN_KEY = \"FDM_ACCESS_TOKEN\";\n  private static readonly REFRESH_TOKEN_KEY = \"FDM_REFRESH_TOKEN\";\n\n  static get isAuthed() {\n    const params: any = qs.parse(window.location.search.replace('?', ''));\n    if (!!params.accessToken && !!params.refreshToken) {\n      this.saveTokens(params);\n      window.location.search = '';\n    }\n    return !!this.accessToken;\n  }\n\n  static get accessToken() {\n    return sessionStorage.getItem(this.ACCESS_TOKEN_KEY);\n  }\n\n  static get refreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  private static saveTokens(response: ITokenResponse) {\n    sessionStorage.setItem(this.ACCESS_TOKEN_KEY, response.accessToken);\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, response.refreshToken);\n    return response;\n  }\n\n  static async login(username: string, password: string) {\n    try {\n      const { data } = await Axios.post(ApiEndpoint.auth.login, {\n        username,\n        password,\n      });\n      return this.saveTokens(data);\n    } catch (err) {\n      console.error(err);\n      return false;\n    }\n  }\n\n  static clearTokens() {\n    sessionStorage.removeItem(this.ACCESS_TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  static logout() {\n    this.clearTokens();\n    window.location.pathname = \"/\";\n  }\n\n  static async refreshAccessToken() {\n    if (!this.refreshToken) {\n      return false;\n    }\n\n    try {\n      const { data } = await Axios.post(\n        ApiEndpoint.auth.refreshAccessToken,\n        null,\n        {\n          params: { refreshToken: this.refreshToken },\n        }\n      );\n      return this.saveTokens(data);\n    } catch (err) {\n      if (err?.response?.status === 404) {\n        this.logout();\n      } else {\n        console.error(err);\n      }\n      return false;\n    }\n  }\n\n  static async getUser() {\n    if (this.isAuthed) {\n      if (!this.user) {\n        this.user = await this.getProfile();\n      }\n      return this.user;\n    }\n    return null;\n  }\n\n  private static async getProfile() {\n    try {\n      const result = await Axios.get(ApiEndpoint.auth.getProfile);\n      return result.data;\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  static changePassword(oldPassword: string, newPassword: string) {\n    return CrudService.put(ApiEndpoint.auth.changePassword, {\n      oldPassword,\n      newPassword,\n    });\n  }\n\n  static get isAdmin() {\n    return this.user.role === UserRole.ADMIN;\n  }\n\n  static register(user: IRegisterRequest) {\n    return CrudService.create(ApiEndpoint.auth.register, user);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}