{"ast":null,"code":"export const UserFormRules = {\n  email: [{\n    required: true,\n    message: 'E-mail is required'\n  }, {\n    type: 'email',\n    message: 'E-mail is invalid'\n  }],\n  username: [{\n    required: true,\n    message: 'Username is required'\n  }, {\n    min: 4,\n    message: 'Username is too short'\n  }, {\n    max: 255,\n    message: 'Username is too long'\n  }],\n  password: [{\n    required: true,\n    message: 'Password is required'\n  }, {\n    min: 8,\n    message: 'Password is too short'\n  }, {\n    max: 255,\n    message: 'Password is too long'\n  }],\n  confirmPassword: [{\n    required: true,\n    message: 'Confirm password is required'\n  }, ({\n    getFieldValue\n  }) => ({\n    async validator(_, value) {\n      if (!value || getFieldValue('password') === value) {\n        return true;\n      }\n\n      throw new Error('Confirm password is not match');\n    }\n\n  })],\n  firstName: [{\n    required: true,\n    message: 'First name is required'\n  }, {\n    min: 2,\n    message: 'First name is too short'\n  }, {\n    max: 255,\n    message: 'First name is too long'\n  }],\n  lastName: [{\n    required: true,\n    message: 'Last name is required'\n  }, {\n    min: 2,\n    message: 'Last name is too short'\n  }, {\n    max: 255,\n    message: 'Last name is too long'\n  }],\n  bio: [{\n    min: 2,\n    message: 'Bio is too short'\n  }, {\n    max: 255,\n    message: 'Bio is too long'\n  }],\n  introduction: [{\n    min: 2,\n    message: 'Introduction is too short'\n  }]\n};","map":{"version":3,"sources":["/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/user/UserFormRules.ts"],"names":["UserFormRules","email","required","message","type","username","min","max","password","confirmPassword","getFieldValue","validator","_","value","Error","firstName","lastName","bio","introduction"],"mappings":"AAKA,OAAO,MAAMA,aAA6B,GAAG;AAC3CC,EAAAA,KAAK,EAAE,CACL;AAAEC,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADK,EAEL;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBD,IAAAA,OAAO,EAAE;AAA1B,GAFK,CADoC;AAK3CE,EAAAA,QAAQ,EAAE,CACR;AAAEH,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADQ,EAER;AAAEG,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GAFQ,EAGR;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYJ,IAAAA,OAAO,EAAE;AAArB,GAHQ,CALiC;AAU3CK,EAAAA,QAAQ,EAAE,CACR;AAAEN,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADQ,EAER;AAAEG,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GAFQ,EAGR;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYJ,IAAAA,OAAO,EAAE;AAArB,GAHQ,CAViC;AAe3CM,EAAAA,eAAe,EAAE,CACf;AAAEP,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADe,EAEf,CAAC;AAAEO,IAAAA;AAAF,GAAD,MAAwB;AACtB,UAAMC,SAAN,CAAgBC,CAAhB,EAAmBC,KAAnB,EAA0B;AACxB,UAAI,CAACA,KAAD,IAAUH,aAAa,CAAC,UAAD,CAAb,KAA8BG,KAA5C,EAAmD;AACjD,eAAO,IAAP;AACD;;AACD,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AANqB,GAAxB,CAFe,CAf0B;AA0B3CC,EAAAA,SAAS,EAAE,CACT;AAAEb,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADS,EAET;AAAEG,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GAFS,EAGT;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYJ,IAAAA,OAAO,EAAE;AAArB,GAHS,CA1BgC;AA+B3Ca,EAAAA,QAAQ,EAAE,CACR;AAAEd,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,OAAO,EAAE;AAA3B,GADQ,EAER;AAAEG,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GAFQ,EAGR;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYJ,IAAAA,OAAO,EAAE;AAArB,GAHQ,CA/BiC;AAoC3Cc,EAAAA,GAAG,EAAE,CACH;AAAEX,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GADG,EAEH;AAAEI,IAAAA,GAAG,EAAE,GAAP;AAAYJ,IAAAA,OAAO,EAAE;AAArB,GAFG,CApCsC;AAwC3Ce,EAAAA,YAAY,EAAE,CACZ;AAAEZ,IAAAA,GAAG,EAAE,CAAP;AAAUH,IAAAA,OAAO,EAAE;AAAnB,GADY;AAxC6B,CAAtC","sourcesContent":["import { Rule } from \"rc-field-form/lib/interface\";\ninterface IUserFormRules {\n  [key: string]: Rule[]\n}\n\nexport const UserFormRules: IUserFormRules = {\n  email: [\n    { required: true, message: 'E-mail is required' },\n    { type: 'email', message: 'E-mail is invalid' }\n  ],\n  username: [\n    { required: true, message: 'Username is required' },\n    { min: 4, message: 'Username is too short' },\n    { max: 255, message: 'Username is too long' }\n  ],\n  password: [\n    { required: true, message: 'Password is required' },\n    { min: 8, message: 'Password is too short' },\n    { max: 255, message: 'Password is too long' }\n  ],\n  confirmPassword: [\n    { required: true, message: 'Confirm password is required' },\n    ({ getFieldValue }) => ({\n      async validator(_, value) {\n        if (!value || getFieldValue('password') === value) {\n          return true;\n        }\n        throw new Error('Confirm password is not match');\n      },\n    })\n  ],\n  firstName: [\n    { required: true, message: 'First name is required' },\n    { min: 2, message: 'First name is too short' },\n    { max: 255, message: 'First name is too long' }\n  ],\n  lastName: [\n    { required: true, message: 'Last name is required' },\n    { min: 2, message: 'Last name is too short' },\n    { max: 255, message: 'Last name is too long' }\n  ],\n  bio: [\n    { min: 2, message: 'Bio is too short' },\n    { max: 255, message: 'Bio is too long' }\n  ],\n  introduction: [\n    { min: 2, message: 'Introduction is too short' }\n  ]\n}"]},"metadata":{},"sourceType":"module"}