{"ast":null,"code":"var _jsxFileName = \"/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/content/ContentEditForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { Checkbox, Form, Input, InputNumber, notification } from \"antd\";\nimport { Uploader } from \"../uploader/Uploader\";\nimport { FileType } from \"../../shared/enums/FileType\";\nimport { FdmEditor } from \"../../shared/components/FdmEditor\";\nimport { ContentEditFormRules } from \"./ContentEditFormRules\";\nimport { ASSETS_URL } from \"../../shared/constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ContentEditForm(props) {\n  _s();\n\n  var _props$content;\n\n  const [form] = Form.useForm();\n  const {\n    formRef,\n    content: propsContent\n  } = props;\n  const callbackRef = useRef();\n  const videoRef = useRef();\n  const editorRef = useRef();\n  const validate = useCallback(async () => {\n    let content;\n\n    try {\n      content = await form.validateFields();\n    } catch {\n      return false;\n    }\n\n    if (!videoRef.current.getFile()) {\n      notification.error({\n        message: \"Error\",\n        description: `Content ${content.order} must have video`\n      });\n      return false;\n    }\n\n    return content;\n  }, [form]);\n  const startProcess = useCallback(async () => {\n    const content = await validate();\n\n    if (!!videoRef.current.getFile()) {\n      videoRef.current.processFile();\n    }\n\n    return content;\n  }, [validate]);\n  const onUpLoadSuccessHandler = useCallback(result => {\n    callbackRef.current(result.filePath);\n  }, []);\n  useEffect(() => {\n    if (formRef) {\n      formRef.current = {\n        validate,\n\n        getContent() {\n          return new Promise(async (resolve, reject) => {\n            let content = await startProcess();\n\n            if (!!content) {\n              callbackRef.current = videoPath => {\n                content = { ...content,\n                  description: editorRef.current.getHtmlContent(),\n                  videoPath\n                };\n\n                if (propsContent) {\n                  content.id = propsContent.id;\n                }\n\n                resolve(content);\n              };\n            } else {\n              reject();\n            }\n          });\n        }\n\n      };\n    }\n  }, [formRef, startProcess, validate, propsContent]);\n  const video = useMemo(() => {\n    if (propsContent) {\n      return [{\n        source: `${ASSETS_URL}/${propsContent.videoPath}`,\n        options: {\n          type: \"local\"\n        }\n      }];\n    }\n\n    return [];\n  }, [propsContent]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      initialValues: props.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/5 pr-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block mb-2\",\n            children: \"Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"order\",\n            children: /*#__PURE__*/_jsxDEV(InputNumber, {\n              min: 1,\n              placeholder: \"Order...\",\n              className: \"w-fulli\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4/5\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block mb-2\",\n            children: [\"Title \", /*#__PURE__*/_jsxDEV(\"b\", {\n              className: \"text-red-400\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"title\",\n            rules: ContentEditFormRules.title,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Title...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"preview\",\n        valuePropName: \"checked\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block mb-2\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"description\",\n        children: /*#__PURE__*/_jsxDEV(FdmEditor, {\n          editorRef: editorRef,\n          html: (_props$content = props.content) === null || _props$content === void 0 ? void 0 : _props$content.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block mb-2\",\n      children: [\"Video \", /*#__PURE__*/_jsxDEV(\"b\", {\n        className: \"text-red-400\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Uploader, {\n      files: video,\n      fileType: FileType.VIDEO,\n      state: \"videoPath\",\n      pondRef: videoRef,\n      onUploadSuccess: onUpLoadSuccessHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ContentEditForm, \"rsTTLzh/Dfrn7QhK/joGDS0kOSE=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = ContentEditForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentEditForm\");","map":{"version":3,"sources":["/Users/hieu/Documents/DoAnCuoiKi/src/WEB_NC/webapp/src/modules/content/ContentEditForm.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","Checkbox","Form","Input","InputNumber","notification","Uploader","FileType","FdmEditor","ContentEditFormRules","ASSETS_URL","ContentEditForm","props","form","useForm","formRef","content","propsContent","callbackRef","videoRef","editorRef","validate","validateFields","current","getFile","error","message","description","order","startProcess","processFile","onUpLoadSuccessHandler","result","filePath","getContent","Promise","resolve","reject","videoPath","getHtmlContent","id","video","source","options","type","title","VIDEO"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { Checkbox, Form, Input, InputNumber, notification } from \"antd\";\nimport { IContent } from \"../../shared/entities/IContent\";\nimport { Uploader } from \"../uploader/Uploader\";\nimport { FileType } from \"../../shared/enums/FileType\";\nimport { FdmEditor } from \"../../shared/components/FdmEditor\";\nimport { ContentEditFormRules } from \"./ContentEditFormRules\";\nimport { ASSETS_URL } from \"../../shared/constants/constants\";\n\ninterface IContentEditFormProps {\n  content?: IContent;\n  formRef?: any;\n}\n\nexport function ContentEditForm(props: IContentEditFormProps) {\n  const [form] = Form.useForm();\n  const { formRef, content: propsContent } = props;\n  const callbackRef = useRef<any>();\n  const videoRef = useRef<any>();\n  const editorRef = useRef<any>();\n\n  const validate = useCallback(async () => {\n    let content;\n    try {\n      content = await form.validateFields();\n    } catch {\n      return false;\n    }\n\n    if (!videoRef.current.getFile()) {\n      notification.error({\n        message: \"Error\",\n        description: `Content ${content.order} must have video`,\n      });\n      return false;\n    }\n\n    return content;\n  }, [form]);\n\n  const startProcess = useCallback(async () => {\n    const content = await validate();\n    if (!!videoRef.current.getFile()) {\n      videoRef.current.processFile();\n    }\n    return content;\n  }, [validate]);\n\n  const onUpLoadSuccessHandler = useCallback((result) => {\n    callbackRef.current(result.filePath);\n  }, []);\n\n  useEffect(() => {\n    if (formRef) {\n      formRef.current = {\n        validate,\n        getContent() {\n          return new Promise(async (resolve, reject) => {\n            let content = await startProcess();\n            if (!!content) {\n              callbackRef.current = (videoPath: string) => {\n                content = {\n                  ...content,\n                  description: editorRef.current.getHtmlContent(),\n                  videoPath,\n                };\n                if (propsContent) {\n                  content.id = propsContent.id;\n                }\n                resolve(content);\n              };\n            } else {\n              reject();\n            }\n          });\n        },\n      };\n    }\n  }, [formRef, startProcess, validate, propsContent]);\n\n  const video = useMemo(() => {\n    if (propsContent) {\n      return [\n        {\n          source: `${ASSETS_URL}/${propsContent.videoPath}`,\n          options: { type: \"local\" },\n        },\n      ];\n    }\n    return [];\n  }, [propsContent]);\n\n  return (\n    <>\n      <Form form={form} initialValues={props.content}>\n        <div className=\"flex\">\n          <div className=\"w-1/5 pr-2\">\n            <label className=\"block mb-2\">Order</label>\n            <Form.Item name=\"order\">\n              <InputNumber min={1} placeholder=\"Order...\" className=\"w-fulli\" />\n            </Form.Item>\n          </div>\n          <div className=\"w-4/5\">\n            <label className=\"block mb-2\">\n              Title <b className=\"text-red-400\">*</b>\n            </label>\n            <Form.Item name=\"title\" rules={ContentEditFormRules.title}>\n              <Input placeholder=\"Title...\" />\n            </Form.Item>\n          </div>\n        </div>\n        <Form.Item name=\"preview\" valuePropName=\"checked\">\n          <Checkbox>Preview</Checkbox>\n        </Form.Item>\n        <label className=\"block mb-2\">Description</label>\n        <Form.Item name=\"description\">\n          <FdmEditor editorRef={editorRef} html={props.content?.description} />\n        </Form.Item>\n      </Form>\n      <label className=\"block mb-2\">\n        Video <b className=\"text-red-400\">*</b>\n      </label>\n      <Uploader\n        files={video}\n        fileType={FileType.VIDEO}\n        state=\"videoPath\"\n        pondRef={videoRef}\n        onUploadSuccess={onUpLoadSuccessHandler}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}