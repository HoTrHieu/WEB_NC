{"ast":null,"code":"/*!\n * FilePondPluginFileValidateSize 2.2.4\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileValidateSize = factory());\n})(this, function () {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        replaceInString = utils.replaceInString,\n        toNaturalFileSize = utils.toNaturalFileSize; // filtering if an item is allowed in hopper\n\n    addFilter('ALLOW_HOPPER_ITEM', function (file, _ref2) {\n      var query = _ref2.query;\n\n      if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n        return true;\n      }\n\n      var sizeMax = query('GET_MAX_FILE_SIZE');\n\n      if (sizeMax !== null && file.size >= sizeMax) {\n        return false;\n      }\n\n      var sizeMin = query('GET_MIN_FILE_SIZE');\n\n      if (sizeMin !== null && file.size <= sizeMin) {\n        return false;\n      }\n\n      return true;\n    }); // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n\n    addFilter('LOAD_FILE', function (file, _ref3) {\n      var query = _ref3.query;\n      return new Promise(function (resolve, reject) {\n        // if not allowed, all fine, exit\n        if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n          return resolve(file);\n        } // check if file should be filtered\n\n\n        var fileFilter = query('GET_FILE_VALIDATE_SIZE_FILTER');\n\n        if (fileFilter && !fileFilter(file)) {\n          return resolve(file);\n        } // reject or resolve based on file size\n\n\n        var sizeMax = query('GET_MAX_FILE_SIZE');\n\n        if (sizeMax !== null && file.size >= sizeMax) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MAX_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MAX_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMax, '.', query('GET_FILE_SIZE_BASE'))\n              })\n            }\n          });\n          return;\n        } // reject or resolve based on file size\n\n\n        var sizeMin = query('GET_MIN_FILE_SIZE');\n\n        if (sizeMin !== null && file.size <= sizeMin) {\n          reject({\n            status: {\n              main: query('GET_LABEL_MIN_FILE_SIZE_EXCEEDED'),\n              sub: replaceInString(query('GET_LABEL_MIN_FILE_SIZE'), {\n                filesize: toNaturalFileSize(sizeMin, '.', query('GET_FILE_SIZE_BASE'))\n              })\n            }\n          });\n          return;\n        } // returns the current option value\n\n\n        var totalSizeMax = query('GET_MAX_TOTAL_FILE_SIZE');\n\n        if (totalSizeMax !== null) {\n          // get the current total file size\n          var currentTotalSize = query('GET_ACTIVE_ITEMS').reduce(function (total, item) {\n            return total + item.fileSize;\n          }, 0); // get the size of the new file\n\n          if (currentTotalSize > totalSizeMax) {\n            reject({\n              status: {\n                main: query('GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED'),\n                sub: replaceInString(query('GET_LABEL_MAX_TOTAL_FILE_SIZE'), {\n                  filesize: toNaturalFileSize(totalSizeMax)\n                })\n              }\n            });\n            return;\n          }\n        } // file is fine, let's pass it back\n\n\n        resolve(file);\n      });\n    });\n    return {\n      options: {\n        // Enable or disable file type validation\n        allowFileSizeValidation: [true, Type.BOOLEAN],\n        // Max individual file size in bytes\n        maxFileSize: [null, Type.INT],\n        // Min individual file size in bytes\n        minFileSize: [null, Type.INT],\n        // Max total file size in bytes\n        maxTotalFileSize: [null, Type.INT],\n        // Filter the files that need to be validated for size\n        fileValidateSizeFilter: [null, Type.FUNCTION],\n        // error labels\n        labelMinFileSizeExceeded: ['File is too small', Type.STRING],\n        labelMinFileSize: ['Minimum file size is {filesize}', Type.STRING],\n        labelMaxFileSizeExceeded: ['File is too large', Type.STRING],\n        labelMaxFileSize: ['Maximum file size is {filesize}', Type.STRING],\n        labelMaxTotalFileSizeExceeded: ['Maximum total size exceeded', Type.STRING],\n        labelMaxTotalFileSize: ['Maximum total file size is {filesize}', Type.STRING]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/node_modules/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginFileValidateSize","plugin","_ref","addFilter","utils","Type","replaceInString","toNaturalFileSize","file","_ref2","query","sizeMax","size","sizeMin","_ref3","Promise","resolve","reject","fileFilter","status","main","sub","filesize","totalSizeMax","currentTotalSize","reduce","total","item","fileSize","options","allowFileSizeValidation","BOOLEAN","maxFileSize","INT","minFileSize","maxTotalFileSize","fileValidateSizeFilter","FUNCTION","labelMinFileSizeExceeded","STRING","labelMinFileSize","labelMaxFileSizeExceeded","labelMaxFileSize","labelMaxTotalFileSizeExceeded","labelMaxTotalFileSize","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/*!\n * FilePondPluginFileValidateSize 2.2.4\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? (module.exports = factory())\n        : typeof define === 'function' && define.amd\n        ? define(factory)\n        : ((global = global || self), (global.FilePondPluginFileValidateSize = factory()));\n})(this, function() {\n    'use strict';\n\n    var plugin = function plugin(_ref) {\n        var addFilter = _ref.addFilter,\n            utils = _ref.utils;\n        // get quick reference to Type utils\n        var Type = utils.Type,\n            replaceInString = utils.replaceInString,\n            toNaturalFileSize = utils.toNaturalFileSize;\n\n        // filtering if an item is allowed in hopper\n        addFilter('ALLOW_HOPPER_ITEM', function(file, _ref2) {\n            var query = _ref2.query;\n            if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n                return true;\n            }\n\n            var sizeMax = query('GET_MAX_FILE_SIZE');\n            if (sizeMax !== null && file.size >= sizeMax) {\n                return false;\n            }\n\n            var sizeMin = query('GET_MIN_FILE_SIZE');\n            if (sizeMin !== null && file.size <= sizeMin) {\n                return false;\n            }\n\n            return true;\n        });\n\n        // called for each file that is loaded\n        // right before it is set to the item state\n        // should return a promise\n        addFilter('LOAD_FILE', function(file, _ref3) {\n            var query = _ref3.query;\n            return new Promise(function(resolve, reject) {\n                // if not allowed, all fine, exit\n                if (!query('GET_ALLOW_FILE_SIZE_VALIDATION')) {\n                    return resolve(file);\n                }\n\n                // check if file should be filtered\n                var fileFilter = query('GET_FILE_VALIDATE_SIZE_FILTER');\n                if (fileFilter && !fileFilter(file)) {\n                    return resolve(file);\n                }\n\n                // reject or resolve based on file size\n                var sizeMax = query('GET_MAX_FILE_SIZE');\n                if (sizeMax !== null && file.size >= sizeMax) {\n                    reject({\n                        status: {\n                            main: query('GET_LABEL_MAX_FILE_SIZE_EXCEEDED'),\n                            sub: replaceInString(query('GET_LABEL_MAX_FILE_SIZE'), {\n                                filesize: toNaturalFileSize(\n                                    sizeMax,\n                                    '.',\n                                    query('GET_FILE_SIZE_BASE')\n                                ),\n                            }),\n                        },\n                    });\n\n                    return;\n                }\n\n                // reject or resolve based on file size\n                var sizeMin = query('GET_MIN_FILE_SIZE');\n                if (sizeMin !== null && file.size <= sizeMin) {\n                    reject({\n                        status: {\n                            main: query('GET_LABEL_MIN_FILE_SIZE_EXCEEDED'),\n                            sub: replaceInString(query('GET_LABEL_MIN_FILE_SIZE'), {\n                                filesize: toNaturalFileSize(\n                                    sizeMin,\n                                    '.',\n                                    query('GET_FILE_SIZE_BASE')\n                                ),\n                            }),\n                        },\n                    });\n\n                    return;\n                }\n\n                // returns the current option value\n                var totalSizeMax = query('GET_MAX_TOTAL_FILE_SIZE');\n                if (totalSizeMax !== null) {\n                    // get the current total file size\n                    var currentTotalSize = query('GET_ACTIVE_ITEMS').reduce(function(total, item) {\n                        return total + item.fileSize;\n                    }, 0);\n\n                    // get the size of the new file\n                    if (currentTotalSize > totalSizeMax) {\n                        reject({\n                            status: {\n                                main: query('GET_LABEL_MAX_TOTAL_FILE_SIZE_EXCEEDED'),\n                                sub: replaceInString(query('GET_LABEL_MAX_TOTAL_FILE_SIZE'), {\n                                    filesize: toNaturalFileSize(totalSizeMax),\n                                }),\n                            },\n                        });\n\n                        return;\n                    }\n                }\n\n                // file is fine, let's pass it back\n                resolve(file);\n            });\n        });\n\n        return {\n            options: {\n                // Enable or disable file type validation\n                allowFileSizeValidation: [true, Type.BOOLEAN],\n\n                // Max individual file size in bytes\n                maxFileSize: [null, Type.INT],\n\n                // Min individual file size in bytes\n                minFileSize: [null, Type.INT],\n\n                // Max total file size in bytes\n                maxTotalFileSize: [null, Type.INT],\n\n                // Filter the files that need to be validated for size\n                fileValidateSizeFilter: [null, Type.FUNCTION],\n\n                // error labels\n                labelMinFileSizeExceeded: ['File is too small', Type.STRING],\n                labelMinFileSize: ['Minimum file size is {filesize}', Type.STRING],\n\n                labelMaxFileSizeExceeded: ['File is too large', Type.STRING],\n                labelMaxFileSize: ['Maximum file size is {filesize}', Type.STRING],\n\n                labelMaxTotalFileSizeExceeded: ['Maximum total size exceeded', Type.STRING],\n                labelMaxTotalFileSize: ['Maximum total file size is {filesize}', Type.STRING],\n            },\n        };\n    };\n\n    // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n    var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n    if (isBrowser) {\n        document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\n    }\n\n    return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}