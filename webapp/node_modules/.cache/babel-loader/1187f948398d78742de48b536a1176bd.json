{"ast":null,"code":"var _jsxFileName = \"/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/shared/components/FdmEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { stateToHTML } from 'draft-js-export-html';\nimport { EditorState, convertFromHTML, ContentState } from 'draft-js';\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FdmEditor(props) {\n  _s();\n\n  const [editorState, setEditorState] = useState();\n  const {\n    html\n  } = props;\n  useEffect(() => {\n    if (!!html) {\n      const blocksFromHTML = convertFromHTML(html || '');\n      const state = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n      setEditorState(EditorState.createWithContent(state));\n    } else {\n      setEditorState(EditorState.createEmpty());\n    }\n  }, [html]);\n  const {\n    editorRef\n  } = props;\n  useEffect(() => {\n    if (editorRef) {\n      editorRef.current = {\n        getHtmlContent() {\n          return stateToHTML(editorState === null || editorState === void 0 ? void 0 : editorState.getCurrentContent());\n        }\n\n      };\n    }\n  }, [editorRef, editorState]);\n  return /*#__PURE__*/_jsxDEV(Editor, {\n    wrapperClassName: \"border\",\n    editorClassName: \"px-4\",\n    editorState: editorState,\n    onEditorStateChange: setEditorState\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FdmEditor, \"QcwzCdqAD7q0ezi/XPrCpCpS+Sw=\");\n\n_c = FdmEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"FdmEditor\");","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/shared/components/FdmEditor.tsx"],"names":["React","useEffect","useState","stateToHTML","EditorState","convertFromHTML","ContentState","Editor","FdmEditor","props","editorState","setEditorState","html","blocksFromHTML","state","createFromBlockArray","contentBlocks","entityMap","createWithContent","createEmpty","editorRef","current","getHtmlContent","getCurrentContent"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,YAAvC,QAA2D,UAA3D;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAOA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA2C;AAAA;;AAChD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAWH,KAAjB;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC,CAACW,IAAN,EAAY;AACV,YAAMC,cAAc,GAAGR,eAAe,CAACO,IAAI,IAAI,EAAT,CAAtC;AACA,YAAME,KAAK,GAAGR,YAAY,CAACS,oBAAb,CACZF,cAAc,CAACG,aADH,EAEZH,cAAc,CAACI,SAFH,CAAd;AAIAN,MAAAA,cAAc,CAACP,WAAW,CAACc,iBAAZ,CAA8BJ,KAA9B,CAAD,CAAd;AACD,KAPD,MAOO;AACLH,MAAAA,cAAc,CAACP,WAAW,CAACe,WAAZ,EAAD,CAAd;AACD;AACF,GAXQ,EAWN,CAACP,IAAD,CAXM,CAAT;AAaA,QAAM;AAAEQ,IAAAA;AAAF,MAAgBX,KAAtB;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACC,OAAV,GAAoB;AAClBC,QAAAA,cAAc,GAAG;AACf,iBAAOnB,WAAW,CAACO,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEa,iBAAb,EAAD,CAAlB;AACD;;AAHiB,OAApB;AAKD;AACF,GARQ,EAQN,CAACH,SAAD,EAAYV,WAAZ,CARM,CAAT;AAUA,sBACE,QAAC,MAAD;AAAQ,IAAA,gBAAgB,EAAC,QAAzB;AAAkC,IAAA,eAAe,EAAC,MAAlD;AAAyD,IAAA,WAAW,EAAEA,WAAtE;AAAmF,IAAA,mBAAmB,EAAEC;AAAxG;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GA9BeH,S;;KAAAA,S","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { stateToHTML } from 'draft-js-export-html';\nimport { EditorState, convertFromHTML, ContentState } from 'draft-js';\nimport { Editor } from \"react-draft-wysiwyg\";\n\ninterface IFdmEditorProps {\n  editorRef?: any;\n  html?: string;\n}\n\nexport function FdmEditor(props: IFdmEditorProps) {\n  const [editorState, setEditorState] = useState<any>();\n  const { html } = props;\n  useEffect(() => {\n    if (!!html) {\n      const blocksFromHTML = convertFromHTML(html || '');\n      const state = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap,\n      );\n      setEditorState(EditorState.createWithContent(state));\n    } else {\n      setEditorState(EditorState.createEmpty());\n    }\n  }, [html]);\n\n  const { editorRef } = props;\n  useEffect(() => {\n    if (editorRef) {\n      editorRef.current = {\n        getHtmlContent() {\n          return stateToHTML(editorState?.getCurrentContent());\n        }\n      }\n    }\n  }, [editorRef, editorState]);\n\n  return (\n    <Editor wrapperClassName=\"border\" editorClassName=\"px-4\" editorState={editorState} onEditorStateChange={setEditorState} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}