{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { AuthService } from \"../../modules/auth/AuthService\";\nimport { useFdmStore } from \"../store/useFdmStore\";\nexport function useAuthedUser() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [{\n    user\n  }, dispatch] = useFdmStore();\n  useEffect(() => {\n    (async () => {\n      if (AuthService.isAuthed) {\n        dispatch('SET_USER', await AuthService.getUser());\n      }\n\n      setLoading(false);\n    })();\n  }, [dispatch]);\n  return useMemo(() => ({\n    authedUser: user,\n    loading\n  }), [user, loading]);\n}\n\n_s(useAuthedUser, \"cM2FDHGuRggHLhaJN1TuyuiFTF0=\", false, function () {\n  return [useFdmStore];\n});","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/shared/hooks/useAuthedUser.ts"],"names":["useEffect","useMemo","useState","AuthService","useFdmStore","useAuthedUser","loading","setLoading","user","dispatch","isAuthed","getUser","authedUser"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAAC;AAAEM,IAAAA;AAAF,GAAD,EAAWC,QAAX,IAAuBL,WAAW,EAAxC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAIG,WAAW,CAACO,QAAhB,EAA0B;AACxBD,QAAAA,QAAQ,CAAC,UAAD,EAAa,MAAMN,WAAW,CAACQ,OAAZ,EAAnB,CAAR;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KALD;AAMD,GAPQ,EAON,CAACE,QAAD,CAPM,CAAT;AASA,SAAOR,OAAO,CACZ,OAAO;AACLW,IAAAA,UAAU,EAAEJ,IADP;AAELF,IAAAA;AAFK,GAAP,CADY,EAKZ,CAACE,IAAD,EAAOF,OAAP,CALY,CAAd;AAOD;;GApBeD,a;UAEeD,W","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { AuthService } from \"../../modules/auth/AuthService\";\nimport { useFdmStore } from \"../store/useFdmStore\";\n\nexport function useAuthedUser() {\n  const [loading, setLoading] = useState(true);\n  const [{ user }, dispatch] = useFdmStore();\n\n  useEffect(() => {\n    (async () => {\n      if (AuthService.isAuthed) {\n        dispatch('SET_USER', await AuthService.getUser());\n      }\n      setLoading(false);\n    })();\n  }, [dispatch]);\n\n  return useMemo(\n    () => ({\n      authedUser: user,\n      loading,\n    }),\n    [user, loading]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}