{"ast":null,"code":"var _jsxFileName = \"/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/uploader/Uploader.tsx\";\nimport { notification } from \"antd\";\nimport React from \"react\";\nimport { FilePond } from \"react-filepond\";\nimport { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { FileType } from \"../../shared/enums/FileType\";\nimport { StdResponseCode } from \"../../shared/enums/StdResponseCode\";\nimport { AuthService } from \"../auth/AuthService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configs = {\n  [FileType.IMAGE]: {\n    maxSize: \"5MB\",\n    // 5MB\n    validMimeTypes: [\"image/gif\", \"image/jpeg\", \"image/png\", \"image/svg+xml\", \"image/webp\"]\n  },\n  [FileType.VIDEO]: {\n    maxSize: \"500MB\",\n    // 500MB\n    validMimeTypes: [\"video/x-flv\", \"video/mp4\", \"video/3gpp\"]\n  }\n};\nexport function Uploader(props) {\n  const config = configs[props.fileType];\n  return /*#__PURE__*/_jsxDEV(FilePond, {\n    name: \"file\",\n    maxFiles: 1,\n    server: {\n      url: ApiEndpoint.uploader.upload,\n      load: (source, load) => {\n        const myRequest = new Request(source);\n        fetch(myRequest).then(function (response) {\n          response.blob().then(function (myBlob) {\n            load(myBlob);\n          });\n        });\n      },\n      process: {\n        headers: {\n          'x-file-type': props.fileType,\n          'x-upload-state': props.state,\n          'Authorization': `Bearer ${AuthService.accessToken}`\n        },\n        onload: raw => {\n          const response = JSON.parse(raw);\n\n          if (response.code === StdResponseCode.SUCCESS) {\n            props.onUploadSuccess && props.onUploadSuccess(response.result);\n          } else {\n            notification.error({\n              message: 'Error',\n              description: 'Upload failed, please try again'\n            });\n          }\n        }\n      }\n    },\n    ref: ref => {\n      if (props.pondRef) {\n        props.pondRef.current = ref;\n      }\n    },\n    dropValidation: true,\n    instantUpload: false,\n    acceptedFileTypes: config.validMimeTypes,\n    maxFileSize: config.maxSize,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = Uploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"Uploader\");","map":{"version":3,"sources":["/Users/hieu/Documents/HCMUS_FIT/WEB_NC/webapp/src/modules/uploader/Uploader.tsx"],"names":["notification","React","FilePond","ApiEndpoint","FileType","StdResponseCode","AuthService","configs","IMAGE","maxSize","validMimeTypes","VIDEO","Uploader","props","config","fileType","url","uploader","upload","load","source","myRequest","Request","fetch","then","response","blob","myBlob","process","headers","state","accessToken","onload","raw","JSON","parse","code","SUCCESS","onUploadSuccess","result","error","message","description","ref","pondRef","current"],"mappings":";AAAA,SAASA,YAAT,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAUA,MAAMC,OAAO,GAAG;AACd,GAACH,QAAQ,CAACI,KAAV,GAAkB;AAChBC,IAAAA,OAAO,EAAE,KADO;AACA;AAChBC,IAAAA,cAAc,EAAE,CACd,WADc,EAEd,YAFc,EAGd,WAHc,EAId,eAJc,EAKd,YALc;AAFA,GADJ;AAWd,GAACN,QAAQ,CAACO,KAAV,GAAkB;AAChBF,IAAAA,OAAO,EAAE,OADO;AACE;AAClBC,IAAAA,cAAc,EAAE,CAAC,aAAD,EAAgB,WAAhB,EAA6B,YAA7B;AAFA;AAXJ,CAAhB;AAiBA,OAAO,SAASE,QAAT,CAAkBC,KAAlB,EAAyC;AAC9C,QAAMC,MAAM,GAAGP,OAAO,CAACM,KAAK,CAACE,QAAP,CAAtB;AACA,sBACE,QAAC,QAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAE,CAFZ;AAGE,IAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAEb,WAAW,CAACc,QAAZ,CAAqBC,MADpB;AAENC,MAAAA,IAAI,EAAE,CAACC,MAAD,EAASD,IAAT,KAAkB;AACtB,cAAME,SAAS,GAAG,IAAIC,OAAJ,CAAYF,MAAZ,CAAlB;AACAG,QAAAA,KAAK,CAACF,SAAD,CAAL,CAAiBG,IAAjB,CAAsB,UAASC,QAAT,EAAmB;AACvCA,UAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAASG,MAAT,EAAiB;AACpCR,YAAAA,IAAI,CAACQ,MAAD,CAAJ;AACD,WAFD;AAGD,SAJD;AAKH,OATO;AAUNC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AACP,yBAAehB,KAAK,CAACE,QADd;AAEP,4BAAkBF,KAAK,CAACiB,KAFjB;AAGP,2BAAkB,UAASxB,WAAW,CAACyB,WAAY;AAH5C,SADF;AAMPC,QAAAA,MAAM,EAAGC,GAAD,IAAc;AACpB,gBAAMR,QAAQ,GAAGS,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAjB;;AACA,cAAIR,QAAQ,CAACW,IAAT,KAAkB/B,eAAe,CAACgC,OAAtC,EAA+C;AAC7CxB,YAAAA,KAAK,CAACyB,eAAN,IAAyBzB,KAAK,CAACyB,eAAN,CAAsBb,QAAQ,CAACc,MAA/B,CAAzB;AACD,WAFD,MAEO;AACLvC,YAAAA,YAAY,CAACwC,KAAb,CAAmB;AACjBC,cAAAA,OAAO,EAAE,OADQ;AAEjBC,cAAAA,WAAW,EAAE;AAFI,aAAnB;AAID;AACF;AAhBM;AAVH,KAHV;AAgCE,IAAA,GAAG,EAAGC,GAAD,IAAS;AACZ,UAAI9B,KAAK,CAAC+B,OAAV,EAAmB;AACjB/B,QAAAA,KAAK,CAAC+B,OAAN,CAAcC,OAAd,GAAwBF,GAAxB;AACD;AACF,KApCH;AAqCE,IAAA,cAAc,EAAE,IArClB;AAsCE,IAAA,aAAa,EAAE,KAtCjB;AAuCE,IAAA,iBAAiB,EAAE7B,MAAM,CAACJ,cAvC5B;AAwCE,IAAA,WAAW,EAAEI,MAAM,CAACL,OAxCtB;AAAA,OAyCMI;AAzCN;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD;KA/CeD,Q","sourcesContent":["import { notification } from \"antd\";\nimport React from \"react\";\nimport { FilePond } from \"react-filepond\";\nimport { ApiEndpoint } from \"../../shared/constants/ApiEndpoint\";\nimport { FileType } from \"../../shared/enums/FileType\";\nimport { StdResponseCode } from \"../../shared/enums/StdResponseCode\";\nimport { AuthService } from \"../auth/AuthService\";\n\ninterface IUploaderProps {\n  fileType: FileType;\n  state?: string;\n  onUploadSuccess?: (filePath: string) => any;\n  pondRef?: any;\n  [key: string]: any;\n}\n\nconst configs = {\n  [FileType.IMAGE]: {\n    maxSize: \"5MB\", // 5MB\n    validMimeTypes: [\n      \"image/gif\",\n      \"image/jpeg\",\n      \"image/png\",\n      \"image/svg+xml\",\n      \"image/webp\",\n    ],\n  },\n  [FileType.VIDEO]: {\n    maxSize: \"500MB\", // 500MB\n    validMimeTypes: [\"video/x-flv\", \"video/mp4\", \"video/3gpp\"],\n  },\n};\n\nexport function Uploader(props: IUploaderProps) {\n  const config = configs[props.fileType];\n  return (\n    <FilePond\n      name=\"file\"\n      maxFiles={1}\n      server={{\n        url: ApiEndpoint.uploader.upload,\n        load: (source, load) => {\n          const myRequest = new Request(source);\n          fetch(myRequest).then(function(response) {\n            response.blob().then(function(myBlob) {\n              load(myBlob)\n            });\n          });         \n      },\n        process: {\n          headers: {\n            'x-file-type': props.fileType,\n            'x-upload-state': props.state,\n            'Authorization': `Bearer ${AuthService.accessToken}`\n          },\n          onload: (raw: any) => {\n            const response = JSON.parse(raw);\n            if (response.code === StdResponseCode.SUCCESS) {\n              props.onUploadSuccess && props.onUploadSuccess(response.result);\n            } else {\n              notification.error({\n                message: 'Error',\n                description: 'Upload failed, please try again'\n              })\n            }\n          }\n        } as any\n      }}\n      ref={(ref) => {\n        if (props.pondRef) {\n          props.pondRef.current = ref;\n        }\n      }}\n      dropValidation={true}\n      instantUpload={false}\n      acceptedFileTypes={config.validMimeTypes}\n      maxFileSize={config.maxSize}\n      {...props}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}