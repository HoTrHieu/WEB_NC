import { AuthUser } from 'src/auth/dto/auth-user.dto';
import { ContentService } from 'src/content/content.service';
import { EnrollmentService } from 'src/enrollment/enrollment.service';
import { HighlightCourseService } from 'src/highlight-course/highlight-course.service';
import { PagingResponse } from 'src/shared/dtos/paging-response.dto';
import { Course } from 'src/shared/entities/course.entity';
import { Enrollment } from 'src/shared/entities/enrollment.entity';
import { WatchList } from 'src/shared/entities/watch-list.entity';
import { EntityStatus } from 'src/shared/enums/entity-status';
import { WatchListService } from 'src/watch-list/watch-list.service';
import { FindManyOptions, Repository } from 'typeorm';
import { CourseEsService } from './course-es.service';
import { CourseResponse } from './dto/course-response.dto';
import { CourseSearchRequest } from './dto/course-search-request.dto';
import { CourseTopType } from './enums/course-top-type';
export declare class CourseService {
    private courseRepository;
    private courseEsService;
    private highlightCourseService;
    private watchListService;
    private enrollmentService;
    private contentService;
    private readonly logger;
    private readonly PROJECTION;
    constructor(courseRepository: Repository<Course>, courseEsService: CourseEsService, highlightCourseService: HighlightCourseService, watchListService: WatchListService, enrollmentService: EnrollmentService, contentService: ContentService);
    decor(courses: Course[], user?: AuthUser): Promise<CourseResponse[]>;
    all(user?: AuthUser): Promise<CourseResponse[]>;
    search(request: CourseSearchRequest, user?: AuthUser): Promise<PagingResponse<CourseResponse>>;
    findByIdIn(ids: number[], options?: FindManyOptions<Course>): Promise<any[]>;
    getDetail(courseId: number, user?: AuthUser): Promise<CourseResponse>;
    findCategoryId(courseId: number): Promise<any>;
    exists(courseId: number): Promise<boolean>;
    validate(courseId: number, userId: number): Promise<boolean>;
    validateAndThrow(courseId: number, userId: number): Promise<void>;
    save(course: Course): Promise<{
        slug: string;
        id: number;
        title: string;
        subDescription: string;
        description: string;
        price: number;
        discount: number;
        avatarPath: string;
        coverPath: string;
        totalEnrollment: number;
        avgStar: number;
        totalReview: number;
        totalView: number;
        creatorId: number;
        categoryId: number;
        status: EntityStatus;
        updatedDate: Date;
        createdDate: Date;
        category: import("../shared/entities/category.entity").Category;
        creator: import("../shared/entities/user.entity").User;
        watchLists: WatchList[];
        enrollments: Enrollment[];
        reviews: import("../shared/entities/review.entity").Review[];
        highlights: import("../shared/entities/highlight-course.entity").HighlightCourse[];
    } & Course>;
    add(userId: number, course: Course): Promise<{
        slug: string;
        id: number;
        title: string;
        subDescription: string;
        description: string;
        price: number;
        discount: number;
        avatarPath: string;
        coverPath: string;
        totalEnrollment: number;
        avgStar: number;
        totalReview: number;
        totalView: number;
        creatorId: number;
        categoryId: number;
        status: EntityStatus;
        updatedDate: Date;
        createdDate: Date;
        category: import("../shared/entities/category.entity").Category;
        creator: import("../shared/entities/user.entity").User;
        watchLists: WatchList[];
        enrollments: Enrollment[];
        reviews: import("../shared/entities/review.entity").Review[];
        highlights: import("../shared/entities/highlight-course.entity").HighlightCourse[];
    } & Course>;
    update(userId: number, courseId: number, course: Course): Promise<true>;
    private partialUpdate;
    updateStatus(userId: number, courseId: number, status: EntityStatus): Promise<boolean>;
    updateAvgStar(courseId: number, avgStar: number): Promise<boolean>;
    updateTotalEnrollment(courseId: number, totalEnrollment: number): Promise<boolean>;
    findTotalView(courseId: number): Promise<any>;
    increaseTotalView(courseId: number): Promise<boolean>;
    topOfWeeks(user?: AuthUser): Promise<CourseResponse[]>;
    top(type: CourseTopType, limit?: number, user?: AuthUser): Promise<CourseResponse[]>;
}
